{"version":3,"file":"kombinatoricsjs.umd.js","sources":["../src/kombinatoricsjs.ts"],"sourcesContent":["/*TYPEDEFS?\ntype CallbackFunctionVariadicAnyReturn = (...args: any[]) => any;\ntype CallbackFunctionSomeVariadic =\n  (arg1: string, arg2: number, ...args: any[]) => void;\n*/\ntype genericListFn = <S>(list: S[], ...args: any[]) => S[][]\n\nexport const factorial = (n: number): number => {\n  let f: number = 1\n  for (let i: number = 1; i < n + 1; ++i) {\n    f *= i\n  }\n  return f\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const cNK = (n: number, k: number): number => {\n  let i: number,\n    coeff: number = 1\n  if (n < k) return 0\n  if (n === k) return 1\n  for (i = n - k + 1; i <= n; ++i) coeff *= i\n  for (i = 1; i <= k; ++i) coeff /= i\n  return coeff\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const pNK = (n: number, k: number): number => {\n  let f: number = 1\n  for (let i: number = n - k + 1; i < n + 1; ++i) {\n    f *= i\n  }\n  return f\n}\n\nexport const matrixToArray = <S>(matrix: S[][]) => {\n  let arr: S[] = [],\n    c: number,\n    r: number,\n    lc: number = matrix.length,\n    lr: number,\n    row: any[]\n  for (c = 0; c < lc; ++c) {\n    row = matrix[c]\n    lr = row.length\n    for (r = 0; r < lr; ++r) {\n      arr.push(row[r])\n    }\n  }\n  return arr\n}\n\ntype combinatoricsFn = (...args: number[]) => number\ninterface numbersCacheMap {\n  [index: number]: number\n}\n/*@TODO improve memoize to work with a wider range of functions (at least combinatorics with numeric inputs*/\nconst memoize: (fn: combinatoricsFn) => combinatoricsFn = (\n  fn: combinatoricsFn\n): combinatoricsFn => {\n  const cache: numbersCacheMap = {}\n  return (n: number, k: number = 0): number => {\n    if (n < 256 && k <= n) {\n      let key = (n << 9) | k\n      let out = cache[key]\n      return out ? out : (cache[key] = fn(n, k))\n    } else return fn(n, k)\n  }\n}\n\nexport const memoize_factorial = memoize(factorial)\nexport const memoize_pNK = memoize(pNK)\nexport const memoize_cNK = memoize(cNK)\n\n/**\n *BoxMuller method\n */\nconst rnd_bmt = (): number[] => {\n  let x: number = 0,\n    y: number = 0,\n    rds: number,\n    c: number\n\n  // Get two random numbers from -1 to 1.\n  // If the radius is zero or greater than 1, throw them out and pick two new ones\n  // Rejection sampling throws away about 20% of the pairs.\n  do {\n    x = Math.random() * 2 - 1\n    y = Math.random() * 2 - 1\n    rds = x * x + y * y\n  } while (rds == 0 || rds > 1)\n\n  // This magic is the Box-Muller Transform\n  c = Math.sqrt((-2 * Math.log(rds)) / rds)\n\n  // It always creates a pair of numbers. I'll return them in an array.\n  // This function is quite efficient so don't be afraid to throw one away if you don't need both.\n  return [x * c, y * c]\n}\n\n/**\n *Central Limit method\n */\nconst rnd_snd = () => {\n  return Math.random() * 2 - 1 + (Math.random() * 2 - 1) + (Math.random() * 2 - 1)\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n\nexport const shuffle = (ar: any[]): void => {\n  let i: number,\n    r: number,\n    tmp: any,\n    l: number = ar.length\n  for (i = 0; i < l; ++i) {\n    r = ~~(Math.random() * l)\n    ;[ar[r], ar[i]] = [ar[i], ar[r]]\n  }\n}\n\n\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const normalRandom = {\n  BoxMuller: rnd_bmt,\n  CentralLimit: rnd_snd\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n\nexport const indexArray = (l: number) => {\n  let arr: number[] = []\n\n  if (!isNaN(l) && l > 0) {\n    for (let i = 0; i < l; ++i) {\n      arr[i] = i\n    }\n  }\n\n  return arr\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n/*iterator for generating combinations call it nextCombination*/\n\nexport const binomIncrement = (idxVector: number[], maxVal: number) => {\n  let l: number, i: number, j: number\n  j = 0\n  l = idxVector.length\n  if (maxVal < l) return false //doesn't work if n<k\n  if (idxVector[l - 1] < maxVal) idxVector[l - 1]++\n  else {\n    //find value to increment\n    for (i = l - 1; i >= 0; i -= 1) {\n      if (idxVector[i] < maxVal - j) break\n      else j += 1\n    }\n    if (i < 0) return 0\n    //increment\n    idxVector[i] += 1\n    i += 1\n    //adjust successive values\n    for (i; i < l; i += 1) {\n      idxVector[i] = idxVector[i - 1] + 1\n    }\n  }\n\n  return 1\n}\n\nexport const combinationsIterator = (list: any[], k: number) => {\n  let n: number = list.length\n\n  var _index: number[] = indexArray(k)\n  var beginIndex: number[] = indexArray(k)\n\n  var _collection = list.slice()\n  var combination = new Array(k)\n  var count = 0\n\n  function setCombination() {\n    for (let i = 0; i < k; ++i) {\n      combination[i] = _collection[_index[i]]\n    }\n  }\n\n  setCombination()\n\n  var iterator = {\n    next: function() {\n      if (binomIncrement(_index, n - 1)) {\n        count++\n        setCombination()\n        return 1\n      } else {\n        return 0\n      }\n    },\n    getComb: function(cnt: number = 0) {\n      if (cnt > 0) {\n        var c = cnt - count\n        var step\n        while (c > 0 && (step = binomIncrement(_index, n - 1))) {\n          c--\n          count++\n        }\n\n        if (!step) return 0\n        setCombination()\n      }\n\n      return combination.slice()\n    },\n    getIndex: function() {\n      return _index\n    },\n    getCount: function() {\n      return count\n    },\n    reset: function() {\n      _index = indexArray(k)\n      setCombination()\n      count = 0\n    }\n  }\n  return iterator\n}\n\nexport const pick = (\n  n: number,\n  got: any[],\n  pos: number,\n  from: any[],\n  limit: number,\n  cntLimit: number,\n  callBack: Function\n): number => {\n  let cnt: number = 0,\n    limitCount: number = cntLimit\n  if (got.length == n) {\n    callBack(got)\n    return 1\n  }\n\n  for (let i: number = pos; i < from.length; i++) {\n    got.push(from[i])\n\n    if (limitCount === limit) {\n      cnt += pick(n, got, i + 1, from, limit, 0, callBack)\n      limitCount = 0\n    } else {\n      let next: number =\n        limitCount === 0 || got[got.length - 1] === got[got.length - 2]\n          ? limitCount + 1\n          : limitCount\n\n      cnt += pick(n, got, i, from, limit, next, callBack)\n    }\n\n    got.pop()\n  }\n\n  return cnt\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n\nexport const combinations: genericListFn = (_collection: any[], k: number): any[][] => {\n  if (_collection.length < k || k < 1) {\n    return [_collection]\n  }\n\n  let comb: any[][] = []\n\n  pick(k, [], 0, _collection, 0, 0, (c: any[]) => {\n    comb.push(c.slice())\n  })\n\n  return comb\n}\n\nexport const pickMulti = (\n  n: number,\n  got: any[],\n  pos: number,\n  from: any[],\n  limit: number[],\n  limitCount: number[],\n  callBack: Function\n) => {\n  /*let limitCount = limitCnt.slice();*/\n\n  if (got.length == n) {\n    callBack(got)\n  }\n\n  for (let i: number = pos; i < from.length; i++) {\n    got.push(from[i])\n\n    if (limitCount[i] === limit[i]) {\n      limitCount[i] = 0\n      pickMulti(n, got, i + 1, from, limit, limitCount, callBack)\n    } else {\n      if (pos === 0 || limitCount[i] === 0 || got[got.length - 1] === got[got.length - 2]) {\n        limitCount[i]++\n      }\n      pickMulti(n, got, i, from, limit, limitCount, callBack)\n    }\n\n    got.pop()\n  }\n\n  return 1\n}\n\ninterface multiSetIteratorSetUp  { \n  limitsCounter: number[];\n  index: number[];\n};\n\nexport const generateFirstMultiSetIndex = (n: number, k: number, limits: number[]): multiSetIteratorSetUp => {\n  let index:number[] = new Array(k);\n  let limitsCounter:number[] = (new Array(n)).fill(0);\n  let lastVal:number = 0;\n  for (let i = 0; i < k;i++) {\n    index[i] = lastVal;\n    limitsCounter[lastVal]++;\n    if(limitsCounter[lastVal]==limits[lastVal]) {\n    lastVal++;\n    }\n  }\n\n  return {\n    limitsCounter: limitsCounter,\n    index: index\n  };\n };\n\nexport const multiSetCombinationsStep = (index: number[], maxVal: number, limits: number[], limitsCount: number[]) => {\n  let k: number = index.length - 1;\n\n  if (index[k] < maxVal) {\n    limitsCount[index[k]]--;\n    index[k]++;\n    limitsCount[index[k]]++;\n  } else {\n    /*find the first to increment*/\n    let lastMaxVal = maxVal;\n    let lastMaxValCounter = 0;\n    while (index[k] == lastMaxVal) {\n      limitsCount[index[k]]--;\n      index[k] = 0;\n      k--;\n     lastMaxValCounter++;\n      if(lastMaxValCounter==limits[lastMaxVal]) {\n        lastMaxVal--;\n        lastMaxValCounter = 0;\n      }\n    }\n    if (k == -1) {\n   \n      return false;\n      /*ended*/\n    }\n    limitsCount[index[k]]--;\n    index[k]++;\n    limitsCount[index[k]]++;\n    k++;\n    /*now set the following elements*/\n    while (k < index.length) {\n      let lastVal = index[k - 1];\n      if (limitsCount[lastVal] < limits[lastVal]) {\n        index[k] = lastVal;\n        limitsCount[lastVal]++;\n      } else if (lastVal < maxVal) {\n        lastVal++;\n        index[k] = lastVal;\n        limitsCount[lastVal]++;\n      } else if (k = index.length - 1) {\n        return false;\n      }\n      k++;\n    }\n\n  }\n  return index;\n}\n\nexport const multiSetUniformIndexCombinationsIterator = (n:number,k:number,r:number) => { \n  let maxVal: number = n - 1;\n  let limits = (new Array(n)).fill(r);\n  let { limitsCounter, index } = generateFirstMultiSetIndex(n, k, limits);\n  return () => { \n    return multiSetCombinationsStep(index, maxVal, limits, limitsCounter);\n  };\n};\n\n\n/*@TODO pass limits as argument to manage non uniform cases*/\nexport const multiSetCombinationsIterator = (list: any[], k: number,repetitions:number) => {\n  let n: number = list.length\n  let maxVal = list.length - 1;\n  let limits = (new Array(list.length)).fill(repetitions);\n  let { limitsCounter, index } = generateFirstMultiSetIndex(list.length, k, limits);\n  let _index: number[] = index.slice();\n  let _collection = list.slice();\n  let combination = new Array(k);\n  let count = 0;\n\n  let setCombination = () => {\n    for (let i = 0; i < k; ++i) {\n      combination[i] = _collection[_index[i]]\n    }\n  }\n\n  setCombination();\n  return {\n    next: () => {\n      if (multiSetCombinationsStep(_index, maxVal, limits, limitsCounter)) {\n        count++;\n        setCombination();\n        return 1;\n      } else {\n        return 0;\n      }\n    },\n    getComb: function(cnt: number = 0) {\n      if (cnt > 0) {\n      let c = cnt - count;\n      let step;\n      while (c > 0 && (step = multiSetCombinationsStep(_index, maxVal, limits, limitsCounter))) {\n        c--;\n        count++;\n      };\n\n        if (!step) return 0;\n        setCombination();\n    }\n\n    return combination.slice();\n    },\n    getIndex: () =>{\n      return _index\n    },\n    getCount: () =>{\n      return count\n    },\n    reset: ()=> {\n    _index = index.slice();\n    setCombination();\n    count = 0;\n    }\n  };\n  \n}\n\n\n/**\n *@method  \n *\n *@param\n *@return\n */\nexport const multiCombinations = (_collection: any[], k: number, repetition: number): any[][] => {\n  let multiComb: any[][] = [];\n  let maxVal = _collection.length - 1;\n  let limits = (new Array(_collection.length)).fill(repetition);\n  let { limitsCounter, index } = generateFirstMultiSetIndex(_collection.length, k, limits);\n\n  //first element\n  multiComb.push(index.map(v => _collection[v]));\n  let next: number[]|boolean = [];\n\n  while (next = multiSetCombinationsStep(index, maxVal, limits, limitsCounter)) {\n     multiComb.push(next.map(v => _collection[v]));\n   }\n\n/*\n  pick(n, [], 0, _collection, repetition, 0, (c: any[]) => {\n    multiComb.push(c.slice())\n  })\n*/\n\n  return multiComb;\n}\n\n/**\n *@method  @TODO to be implemented using iterative method like the one above\n *\n *@param\n *@return\n */\nexport const combinationsMultiSets = (_collection: any[], n: number): any[][] => {\n  var l = _collection.length,\n    limitCount = [0],\n    limits = [0],\n    list = [_collection[0]],\n    j = 0\n\n  for (var i = 1; i < l; ++i) {\n    if (_collection[i] === _collection[i - 1]) {\n      limits[j]++\n    } else {\n      j++\n      list[j] = _collection[i]\n      limitCount.push(0)\n      limits.push(0)\n    }\n  }\n  var multiComb: any[][] = []\n\n  pickMulti(n, [], 0, list, limits, limitCount, (c: any[]) => {\n    multiComb.push(c.slice())\n  })\n\n  return multiComb\n}\n\n/*@TODO use destructuring*/\nfunction swap(items: any[], i: number, j: number) {\n  var temp = items[i]\n  items[i] = items[j]\n  items[j] = temp\n}\n\n/*standard callback slices items and returns it*/\nexport const heapPermute = (n: number, items: any[], callBack: Function) => {\n  if (n === 1) {\n    callBack(items, n)\n  } else {\n    for (var i = 0; i < n; ++i) {\n      heapPermute(n - 1, items, callBack)\n      if (n % 2 === 1) {\n        swap(items, 0, n - 1)\n      } else {\n        swap(items, i, n - 1)\n      }\n    }\n  }\n}\n\nexport const permutations = (list: any[]): any[][] => {\n  var p = indexArray(list.length)\n  var i = 1,\n    j\n  var n = list.length\n  var perms: any[][] = [list.slice()]\n  while (i < n) {\n    p[i]--\n    j = i % 2 ? p[i] : 0\n\n    swap(list, i, j)\n    perms.push(list.slice())\n\n    i = 1\n    while (p[i] === 0) {\n      p[i] = i\n      i++\n    }\n  }\n\n  return perms\n}\n\n/*are called variations in some libraries*/\nexport const permutationsNK = (list: any[], k: number): any[][] => {\n  let permsNK: any[][] = []\n  let _combsNK = combinations(list, k)\n  for (let i = 0; i < _combsNK.length; ++i) {\n    permsNK.push(permutations(_combsNK[i]))\n  }\n  return matrixToArray(permsNK)\n}\n\n/*not exposed*/\nconst nextPermutation = (list: any[], index: number[], callBack: Function) => {\n  let n = list.length\n  let i = 1,\n    j\n  while (index[i] === 0) {\n    index[i] = i\n    i++\n  }\n  if (i < n) {\n    index[i]--\n    j = i % 2 ? index[i] : 0\n\n    swap(list, i, j)\n    return callBack(list)\n  } else return 0\n}\n\n/*not exposed*/\nconst nextPermutationLexi = (list: any[]) => {\n  var n = list.length\n  var i = n - 1\n  while (i > 0 && list[i - 1] >= list[i]) {\n    i--\n  }\n  if (i <= 0) return 0\n  var j = n - 1\n\n  while (list[j] <= list[i - 1]) {\n    j--\n  }\n  swap(list, i - 1, j)\n  /*then reverse items from i+1 to j*/\n  j = n - 1\n  while (i < j) {\n    swap(list, i, j)\n    i++\n    j--\n  }\n\n  return 1\n}\n\nconst makeIndex = (list: any[]) => {\n  let n: number = list.length\n  let index: number[] = indexArray(n)\n  let j = 0,\n    k = 0\n\n  for (var i = 1; i < n; ++i) {\n    if (list[i] === list[i - 1]) {\n      index[i] = index[i - 1] = j\n    } else {\n      j++\n      index[i] = j\n    }\n  }\n  return index\n}\n\nexport const permutationsIterator = (list: any[]) => {\n  var n = list.length\n\n  var _index = indexArray(n)\n  var beginIndex = indexArray(n)\n\n  var _collection = list.slice()\n  var permutation = list.slice()\n  var count = 0\n\n  function setPermutation() {\n    for (var i = 0; i < n; ++i) {\n      permutation[i] = _collection[_index[i]]\n    }\n  }\n\n  var iterator = {\n    next: function() {\n      if (nextPermutationLexi(_index)) {\n        count++\n        setPermutation()\n        return 1\n      } else {\n        return 0\n      }\n    },\n    getPerm: function(cnt: number = 0) {\n      if (cnt > 0) {\n        var c = cnt - count\n        var step\n        while (c > 0 && (step = nextPermutationLexi(_index))) {\n          c--\n          count++\n        }\n\n        if (!step) return 0\n        setPermutation()\n      }\n\n      return permutation.slice()\n    },\n    getIndex: function() {\n      return _index\n    },\n    getCount: function() {\n      return count\n    },\n    reset: function() {\n      _index = indexArray(n)\n      setPermutation()\n      count = 0\n    }\n  }\n  return iterator\n}\n\nexport const permutationsMultiSets = (list: any[]): any[][] => {\n  let n = list.length,\n    index = indexArray(n)\n  let data = [list[0]],\n    perm: any[][] = [],\n    j = 0,\n    k = 0,\n    permutationMultiSet: any[][] = [list.slice()]\n  /*initializaition*/\n  for (let i: number = 1; i < n; ++i) {\n    if (list[i] === list[i - 1]) {\n      index[i] = index[i - 1] = j\n    } else {\n      j++\n      index[i] = j\n      data.push(list[i])\n    }\n  }\n\n  while (nextPermutationLexi(index)) {\n    for (k = 0; k < n; ++k) {\n      perm[k] = data[index[k]]\n    }\n\n    permutationMultiSet.push(perm.slice())\n  }\n\n  return permutationMultiSet\n}\n\nexport const permutationsNKMultiSets = (list: any[], k: number): any[][] => {\n  let permsNK: any[][] = []\n  let _combsNK = combinationsMultiSets(list, k)\n  for (let i: number = 0; i < _combsNK.length; ++i) {\n    permsNK.push(permutationsMultiSets(_combsNK[i]))\n  }\n  return matrixToArray(permsNK)\n}\n\nexport const crossProduct = (list: any[], k: number): any[][] => {\n  if (k < 1) return list\n  let crossProdList: any[][] = new Array(Math.pow(list.length, k))\n  let l: number = crossProdList.length\n  let ln: number = list.length\n\n  for (let i: number = 0; i < l; ++i) {\n    let tmpList: any[][] = []\n    let N: number = i\n    for (let j = k - 1; j >= 0; --j) {\n      let digit: number = N % ln\n      N = Math.floor(N / ln)\n      tmpList[j] = list[digit]\n    }\n    crossProdList[i] = tmpList\n  }\n  return crossProdList\n}\n\nexport const version: string = '1.0.3'\n"],"names":[],"mappings":"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"}