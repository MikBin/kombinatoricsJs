{"version":3,"file":"kombinatoricsjs.es5.js","sources":["../src/kombinatoricsjs.ts"],"sourcesContent":["/*TYPEDEFS?\ntype CallbackFunctionVariadicAnyReturn = (...args: any[]) => any;\ntype CallbackFunctionSomeVariadic =\n  (arg1: string, arg2: number, ...args: any[]) => void;\n*/\ntype genericListFn = <S>(list: S[], ...args: any[]) => S[][]\n\nexport const factorial = (n: number): number => {\n  let f: number = 1\n  for (let i: number = 1; i < n + 1; ++i) {\n    f *= i\n  }\n  return f\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const cNK = (n: number, k: number): number => {\n  let i: number,\n    coeff: number = 1\n  if (n < k) return 0\n  if (n === k) return 1\n  for (i = n - k + 1; i <= n; ++i) coeff *= i\n  for (i = 1; i <= k; ++i) coeff /= i\n  return coeff\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const pNK = (n: number, k: number): number => {\n  let f: number = 1\n  for (let i: number = n - k + 1; i < n + 1; ++i) {\n    f *= i\n  }\n  return f\n}\n\nexport const matrixToArray = <S>(matrix: S[][]) => {\n  let arr: S[] = [],\n    c: number,\n    r: number,\n    lc: number = matrix.length,\n    lr: number,\n    row: any[]\n  for (c = 0; c < lc; ++c) {\n    row = matrix[c]\n    lr = row.length\n    for (r = 0; r < lr; ++r) {\n      arr.push(row[r])\n    }\n  }\n  return arr\n}\n\ntype combinatoricsFn = (...args: number[]) => number\ninterface numbersCacheMap {\n  [index: number]: number\n}\n/*@TODO improve memoize to work with a wider range of functions (at least combinatorics with numeric inputs*/\nconst memoize: (fn: combinatoricsFn) => combinatoricsFn = (\n  fn: combinatoricsFn\n): combinatoricsFn => {\n  const cache: numbersCacheMap = {}\n  return (n: number, k: number = 0): number => {\n    if (n < 256 && k <= n) {\n      let key = (n << 9) | k\n      let out = cache[key]\n      return out ? out : (cache[key] = fn(n, k))\n    } else return fn(n, k)\n  }\n}\n\nexport const memoize_factorial = memoize(factorial)\nexport const memoize_pNK = memoize(pNK)\nexport const memoize_cNK = memoize(cNK)\n\n/**\n *BoxMuller method\n */\nconst rnd_bmt = (): number[] => {\n  let x: number = 0,\n    y: number = 0,\n    rds: number,\n    c: number\n\n  // Get two random numbers from -1 to 1.\n  // If the radius is zero or greater than 1, throw them out and pick two new ones\n  // Rejection sampling throws away about 20% of the pairs.\n  do {\n    x = Math.random() * 2 - 1\n    y = Math.random() * 2 - 1\n    rds = x * x + y * y\n  } while (rds == 0 || rds > 1)\n\n  // This magic is the Box-Muller Transform\n  c = Math.sqrt((-2 * Math.log(rds)) / rds)\n\n  // It always creates a pair of numbers. I'll return them in an array.\n  // This function is quite efficient so don't be afraid to throw one away if you don't need both.\n  return [x * c, y * c]\n}\n\n/**\n *Central Limit method\n */\nconst rnd_snd = () => {\n  return Math.random() * 2 - 1 + (Math.random() * 2 - 1) + (Math.random() * 2 - 1)\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n\nexport const shuffle = (ar: any[]): void => {\n  let i: number,\n    r: number,\n    tmp: any,\n    l: number = ar.length\n  for (i = 0; i < l; ++i) {\n    r = ~~(Math.random() * l)\n    ;[ar[r], ar[i]] = [ar[i], ar[r]]\n  }\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const normalRandom = {\n  BoxMuller: rnd_bmt,\n  CentralLimit: rnd_snd\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n\nexport const indexArray = (l: number) => {\n  let arr: number[] = []\n\n  if (!isNaN(l) && l > 0) {\n    for (let i = 0; i < l; ++i) {\n      arr[i] = i\n    }\n  }\n\n  return arr\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n/*iterator for generating combinations call it nextCombination*/\n\nexport const binomIncrement = (idxVector: number[], maxVal: number) => {\n  let l: number, i: number, j: number\n  j = 0\n  l = idxVector.length\n  if (maxVal < l) return false //doesn't work if n<k\n  if (idxVector[l - 1] < maxVal) idxVector[l - 1]++\n  else {\n    //find value to increment\n    for (i = l - 1; i >= 0; i -= 1) {\n      if (idxVector[i] < maxVal - j) break\n      else j += 1\n    }\n    if (i < 0) return 0\n    //increment\n    idxVector[i] += 1\n    i += 1\n    //adjust successive values\n    for (i; i < l; i += 1) {\n      idxVector[i] = idxVector[i - 1] + 1\n    }\n  }\n\n  return 1\n}\n\nexport const combinationsIterator = (list: any[], k: number) => {\n  let n: number = list.length\n\n  var _index: number[] = indexArray(k)\n  var beginIndex: number[] = indexArray(k)\n\n  var _collection = list.slice()\n  var combination = new Array(k)\n  var count = 0\n\n  function setCombination() {\n    for (let i = 0; i < k; ++i) {\n      combination[i] = _collection[_index[i]]\n    }\n  }\n\n  setCombination()\n\n  var iterator = {\n    next: function() {\n      if (binomIncrement(_index, n - 1)) {\n        count++\n        setCombination()\n        return 1\n      } else {\n        return 0\n      }\n    },\n    getComb: function(cnt: number = 0) {\n      if (cnt > 0) {\n        var c = cnt - count\n        var step\n        while (c > 0 && (step = binomIncrement(_index, n - 1))) {\n          c--\n          count++\n        }\n\n        if (!step) return 0\n        setCombination()\n      }\n\n      return combination.slice()\n    },\n    getIndex: function() {\n      return _index\n    },\n    getCount: function() {\n      return count\n    },\n    reset: function() {\n      _index = indexArray(k)\n      setCombination()\n      count = 0\n    }\n  }\n  return iterator\n}\n\nexport const pick = (\n  n: number,\n  got: any[],\n  pos: number,\n  from: any[],\n  limit: number,\n  cntLimit: number,\n  callBack: Function\n): number => {\n  let cnt: number = 0,\n    limitCount: number = cntLimit\n  if (got.length == n) {\n    callBack(got)\n    return 1\n  }\n\n  for (let i: number = pos; i < from.length; i++) {\n    got.push(from[i])\n\n    if (limitCount === limit) {\n      cnt += pick(n, got, i + 1, from, limit, 0, callBack)\n      limitCount = 0\n    } else {\n      let next: number =\n        limitCount === 0 || got[got.length - 1] === got[got.length - 2]\n          ? limitCount + 1\n          : limitCount\n\n      cnt += pick(n, got, i, from, limit, next, callBack)\n    }\n\n    got.pop()\n  }\n\n  return cnt\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n\nexport const combinations: genericListFn = (_collection: any[], k: number): any[][] => {\n  if (_collection.length < k || k < 1) {\n    return [_collection]\n  }\n\n  let comb: any[][] = []\n\n  pick(k, [], 0, _collection, 0, 0, (c: any[]) => {\n    comb.push(c.slice())\n  })\n\n  return comb\n}\n\nexport const pickMulti = (\n  n: number,\n  got: any[],\n  pos: number,\n  from: any[],\n  limit: number[],\n  limitCount: number[],\n  callBack: Function\n) => {\n  /*let limitCount = limitCnt.slice();*/\n\n  if (got.length == n) {\n    callBack(got)\n  }\n\n  for (let i: number = pos; i < from.length; i++) {\n    got.push(from[i])\n\n    if (limitCount[i] === limit[i]) {\n      limitCount[i] = 0\n      pickMulti(n, got, i + 1, from, limit, limitCount, callBack)\n    } else {\n      if (pos === 0 || limitCount[i] === 0 || got[got.length - 1] === got[got.length - 2]) {\n        limitCount[i]++\n      }\n      pickMulti(n, got, i, from, limit, limitCount, callBack)\n    }\n\n    got.pop()\n  }\n\n  return 1\n}\n\ninterface multiSetIteratorSetUp {\n  limitsCounter: number[]\n  index: number[]\n}\n\nexport const generateFirstMultiSetIndex = (\n  n: number,\n  k: number,\n  limits: number[]\n): multiSetIteratorSetUp => {\n  let index: number[] = new Array(k)\n  let limitsCounter: number[] = new Array(n).fill(0)\n  let lastVal: number = 0\n  for (let i = 0; i < k; i++) {\n    index[i] = lastVal\n    limitsCounter[lastVal]++\n    if (limitsCounter[lastVal] == limits[lastVal]) {\n      lastVal++\n    }\n  }\n\n  return {\n    limitsCounter: limitsCounter,\n    index: index\n  }\n}\n\nexport const multiSetCombinationsStep = (\n  index: number[],\n  maxVal: number,\n  limits: number[],\n  limitsCount: number[]\n) => {\n  let k: number = index.length - 1\n\n  if (index[k] < maxVal) {\n    limitsCount[index[k]]--\n    index[k]++\n    limitsCount[index[k]]++\n  } else {\n    /*find the first to increment*/\n    let lastMaxVal = maxVal\n    let lastMaxValCounter = 0\n    while (index[k] == lastMaxVal) {\n      limitsCount[index[k]]--\n      index[k] = 0\n      k--\n      lastMaxValCounter++\n      if (lastMaxValCounter == limits[lastMaxVal]) {\n        lastMaxVal--\n        lastMaxValCounter = 0\n      }\n    }\n    if (k == -1) {\n      return false\n      /*ended*/\n    }\n    limitsCount[index[k]]--\n    index[k]++\n    limitsCount[index[k]]++\n    k++\n    /*now set the following elements*/\n    while (k < index.length) {\n      let lastVal = index[k - 1]\n      if (limitsCount[lastVal] < limits[lastVal]) {\n        index[k] = lastVal\n        limitsCount[lastVal]++\n      } else if (lastVal < maxVal) {\n        lastVal++\n        index[k] = lastVal\n        limitsCount[lastVal]++\n      } else if ((k = index.length - 1)) {\n        return false\n      }\n      k++\n    }\n  }\n  return index\n}\n\nexport const multiSetUniformIndexCombinationsIterator = (n: number, k: number, r: number) => {\n  let maxVal: number = n - 1\n  let limits = new Array(n).fill(r)\n  let { limitsCounter, index } = generateFirstMultiSetIndex(n, k, limits)\n  return () => {\n    return multiSetCombinationsStep(index, maxVal, limits, limitsCounter)\n  }\n}\n\n/*@TODO pass limits as argument to manage non uniform cases*/\nexport const multiSetCombinationsIterator = (list: any[], k: number, repetitions: number) => {\n  let n: number = list.length\n  let maxVal = list.length - 1\n  let limits = new Array(list.length).fill(repetitions)\n  let { limitsCounter, index } = generateFirstMultiSetIndex(list.length, k, limits)\n  let _index: number[] = index.slice()\n  let _collection = list.slice()\n  let combination = new Array(k)\n  let count = 0\n\n  let setCombination = () => {\n    for (let i = 0; i < k; ++i) {\n      combination[i] = _collection[_index[i]]\n    }\n  }\n\n  setCombination()\n  return {\n    next: () => {\n      if (multiSetCombinationsStep(_index, maxVal, limits, limitsCounter)) {\n        count++\n        setCombination()\n        return 1\n      } else {\n        return 0\n      }\n    },\n    getComb: function(cnt: number = 0) {\n      if (cnt > 0) {\n        let c = cnt - count\n        let step\n        while (c > 0 && (step = multiSetCombinationsStep(_index, maxVal, limits, limitsCounter))) {\n          c--\n          count++\n        }\n\n        if (!step) return 0\n        setCombination()\n      }\n\n      return combination.slice()\n    },\n    getIndex: () => {\n      return _index\n    },\n    getCount: () => {\n      return count\n    },\n    reset: () => {\n      _index = index.slice()\n      setCombination()\n      count = 0\n    }\n  }\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const multiCombinations = (_collection: any[], k: number, repetition: number): any[][] => {\n  let multiComb: any[][] = []\n  let maxVal = _collection.length - 1\n  let limits = new Array(_collection.length).fill(repetition)\n  let { limitsCounter, index } = generateFirstMultiSetIndex(_collection.length, k, limits)\n\n  //first element\n  multiComb.push(index.map(v => _collection[v]))\n  let next: number[] | boolean = []\n\n  while ((next = multiSetCombinationsStep(index, maxVal, limits, limitsCounter))) {\n    multiComb.push(next.map(v => _collection[v]))\n  }\n\n  return multiComb\n}\n\n/**\n *@method \n *\n *@param\n *@return\n */\nexport const combinationsMultiSets = (_collection: any[], k: number): any[][] => {\n  let l: number = _collection.length,\n    limits: number[] = [1],\n    list: any[] = [_collection[0]],\n    j: number = 0;\n\n  for (let i:number = 1; i < l; ++i) {\n    if (_collection[i] === _collection[i - 1]) {\n      limits[j]++\n    } else {\n      j++\n      list[j] = _collection[i]\n      limits.push(1)\n    }\n  }\n  let maxVal = list.length - 1;\n  let { limitsCounter, index } = generateFirstMultiSetIndex(list.length, k, limits);\n\n  let multiComb: any[][] = [];\n\n  //first element\n  multiComb.push(index.map(v => list[v]))\n  let next: number[] | boolean = []\n\n  while ((next = multiSetCombinationsStep(index, maxVal, limits, limitsCounter))) {\n    multiComb.push(next.map(v => list[v]))\n  }\n\n  return multiComb\n}\n\n\nconst old_pick_version_combinationsMultiSets = (_collection: any[], n: number): any[][] => {\n  var l = _collection.length,\n    limitCount = [0],\n    limits = [0],\n    list = [_collection[0]],\n    j = 0\n\n  for (var i = 1; i < l; ++i) {\n    if (_collection[i] === _collection[i - 1]) {\n      limits[j]++\n    } else {\n      j++\n      list[j] = _collection[i]\n      limitCount.push(0)\n      limits.push(0)\n    }\n  }\n  var multiComb: any[][] = []\n\n  pickMulti(n, [], 0, list, limits, limitCount, (c: any[]) => {\n    multiComb.push(c.slice())\n  })\n\n  return multiComb\n}\n\n/*@TODO use destructuring*/\nfunction swap(items: any[], i: number, j: number) {\n  var temp = items[i]\n  items[i] = items[j]\n  items[j] = temp\n}\n\n/*standard callback slices items and returns it*/\nexport const heapPermute = (n: number, items: any[], callBack: Function) => {\n  if (n === 1) {\n    callBack(items, n)\n  } else {\n    for (var i = 0; i < n; ++i) {\n      heapPermute(n - 1, items, callBack)\n      if (n % 2 === 1) {\n        swap(items, 0, n - 1)\n      } else {\n        swap(items, i, n - 1)\n      }\n    }\n  }\n}\n\nexport const permutations = (list: any[]): any[][] => {\n  var p = indexArray(list.length)\n  var i = 1,\n    j\n  var n = list.length\n  var perms: any[][] = [list.slice()]\n  while (i < n) {\n    p[i]--\n    j = i % 2 ? p[i] : 0\n\n    swap(list, i, j)\n    perms.push(list.slice())\n\n    i = 1\n    while (p[i] === 0) {\n      p[i] = i\n      i++\n    }\n  }\n\n  return perms\n}\n\n/*are called variations in some libraries*/\nexport const permutationsNK = (list: any[], k: number): any[][] => {\n  let permsNK: any[][] = []\n  let _combsNK = combinations(list, k)\n  for (let i = 0; i < _combsNK.length; ++i) {\n    permsNK.push(permutations(_combsNK[i]))\n  }\n  return matrixToArray(permsNK)\n}\n\n/*not exposed*/\nconst nextPermutation = (list: any[], index: number[], callBack: Function) => {\n  let n = list.length\n  let i = 1,\n    j\n  while (index[i] === 0) {\n    index[i] = i\n    i++\n  }\n  if (i < n) {\n    index[i]--\n    j = i % 2 ? index[i] : 0\n\n    swap(list, i, j)\n    return callBack(list)\n  } else return 0\n}\n\n/*not exposed*/\nconst nextPermutationLexi = (list: any[]) => {\n  var n = list.length\n  var i = n - 1\n  while (i > 0 && list[i - 1] >= list[i]) {\n    i--\n  }\n  if (i <= 0) return 0\n  var j = n - 1\n\n  while (list[j] <= list[i - 1]) {\n    j--\n  }\n  swap(list, i - 1, j)\n  /*then reverse items from i+1 to j*/\n  j = n - 1\n  while (i < j) {\n    swap(list, i, j)\n    i++\n    j--\n  }\n\n  return 1\n}\n\nconst makeIndex = (list: any[]) => {\n  let n: number = list.length\n  let index: number[] = indexArray(n)\n  let j = 0,\n    k = 0\n\n  for (var i = 1; i < n; ++i) {\n    if (list[i] === list[i - 1]) {\n      index[i] = index[i - 1] = j\n    } else {\n      j++\n      index[i] = j\n    }\n  }\n  return index\n}\n\nexport const permutationsIterator = (list: any[]) => {\n  var n = list.length\n\n  var _index = indexArray(n)\n  var beginIndex = indexArray(n)\n\n  var _collection = list.slice()\n  var permutation = list.slice()\n  var count = 0\n\n  function setPermutation() {\n    for (var i = 0; i < n; ++i) {\n      permutation[i] = _collection[_index[i]]\n    }\n  }\n\n  var iterator = {\n    next: function() {\n      if (nextPermutationLexi(_index)) {\n        count++\n        setPermutation()\n        return 1\n      } else {\n        return 0\n      }\n    },\n    getPerm: function(cnt: number = 0) {\n      if (cnt > 0) {\n        var c = cnt - count\n        var step\n        while (c > 0 && (step = nextPermutationLexi(_index))) {\n          c--\n          count++\n        }\n\n        if (!step) return 0\n        setPermutation()\n      }\n\n      return permutation.slice()\n    },\n    getIndex: function() {\n      return _index\n    },\n    getCount: function() {\n      return count\n    },\n    reset: function() {\n      _index = indexArray(n)\n      setPermutation()\n      count = 0\n    }\n  }\n  return iterator\n}\n\nexport const permutationsMultiSets = (list: any[]): any[][] => {\n  let n = list.length,\n    index = indexArray(n)\n  let data = [list[0]],\n    perm: any[][] = [],\n    j = 0,\n    k = 0,\n    permutationMultiSet: any[][] = [list.slice()]\n  /*initializaition*/\n  for (let i: number = 1; i < n; ++i) {\n    if (list[i] === list[i - 1]) {\n      index[i] = index[i - 1] = j\n    } else {\n      j++\n      index[i] = j\n      data.push(list[i])\n    }\n  }\n\n  while (nextPermutationLexi(index)) {\n    for (k = 0; k < n; ++k) {\n      perm[k] = data[index[k]]\n    }\n\n    permutationMultiSet.push(perm.slice())\n  }\n\n  return permutationMultiSet\n}\n\n/*@TODO implement generation index of permutations multisets \nstart with combinations iterator/generator and for each index slice it use next permutation\n\n*/\nexport const permutationsNKMultiSets = (list: any[], k: number): any[][] => {\n  let permsNK: any[][] = []\n  let _combsNK = combinationsMultiSets(list, k)\n  for (let i: number = 0; i < _combsNK.length; ++i) {\n    permsNK.push(permutationsMultiSets(_combsNK[i]))\n  }\n  return matrixToArray(permsNK)\n}\n\nexport const crossProduct = (list: any[], k: number): any[][] => {\n  if (k < 1) return list\n  let crossProdList: any[][] = new Array(Math.pow(list.length, k))\n  let l: number = crossProdList.length\n  let ln: number = list.length\n\n  for (let i: number = 0; i < l; ++i) {\n    let tmpList: any[][] = []\n    let N: number = i\n    for (let j = k - 1; j >= 0; --j) {\n      let digit: number = N % ln\n      N = Math.floor(N / ln)\n      tmpList[j] = list[digit]\n    }\n    crossProdList[i] = tmpList\n  }\n  return crossProdList\n}\n\nexport const version: string = '1.0.3'\n"],"names":[],"mappings":"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"}